{"version":3,"sources":["components/Menu.js","rejoicing-main.png","hooks.js","components/Header.js","components/Winner.js","components/RecentWinnersHeader.js","components/RecentWinners.js","components/HowItWorks.js","components/Faq.js","components/Faqs.js","App.js","reportWebVitals.js","index.js"],"names":["Menu","className","lotteryInterface","utils","Interface","lotteryContractAbi","Contract","useStyles","makeStyles","theme","green","background","pink","container","padding","display","justifyContent","gap","spacing","Header","props","classes","useEthers","activateBrowserWallet","deactivate","account","recentWinner","isConnected","color","onClick","connectMetaMask","lotteryState","endLottery","startLottery","enterLottery","src","rejoicingman","width","height","Winner","winner","player","parseFloat","Web3","fromWei","entranceFeeInWei","toFixed","applicants","amountWon","Date","closedDate","toLocaleString","RecentWinnersHeader","header","address","fee","won","date","winnersheader","RecentWinners","useState","recentWinners","id","map","toString","index","HowItWorks","style","Faq","isOpen","setisOpen","faq","question","answer","frequentlyAskQuestion","Faqs","faqs","INFURA_ENDPOINT","App","LotteryContractAddress","setrecentWinners","setisConnected","accounts","setAccounts","setlotteryContract","setWeb3","setlotteryState","a","window","ethereum","on","console","log","givenProvider","eth","getAccounts","then","response","getLotteryState","lotteryContract","methods","lottery_state","call","error","useEffect","web3_temp","abi","detectMetaMaskAccountChange","lottery_count","lotteryCount","recentWinnerstemp","countTemp","maxLotterycount","push","alert","getRecentWinners","send","result","web3","lotteryContractOwner","privateKeyToAccount","getTransactionCount","err","txCount","txObject","nonce","to","gasLimit","gasPrice","toHex","toWei","chainId","data","encodeABI","signTransaction","privateKey","signedTx","sendSignedTransaction","rawTransaction","hash","enter","from","value","errorii","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e51192b.chunk.js","sourcesContent":["import MenuItem from \"./Menuitem\";\r\nconst menuItems = [\"Home\", \"Recent winners\", \"How to Play\", \"FAQs\"];\r\nfunction Menu() {\r\n    return (\r\n        <div className=\"header-title\">\r\n            Easyget Rinkeby Ethereum Lottery Contract\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Menu;","export default __webpack_public_path__ + \"static/media/rejoicing-main.00f6b3ab.png\";","import { useContractFunction } from \"@usedapp/core\";\r\nimport { Contract, utils } from \"ethers\";\r\n// import lotteryContract from \"./App.js\"\r\nimport lotteryContractAbi from \"./abi/lottery.json\"\r\n\r\n\r\nconst lotteryContractAddress = \"0x61fc507e6e2f41fb207c6fd21ed54cf8caf6ecf9\"\r\nconst lotteryInterface = new utils.Interface(lotteryContractAbi)\r\nconst lotteryContract = new Contract(lotteryContractAddress, lotteryInterface)\r\nexport function UseContractMethod(methodName) {\r\n    const { state, send } = useContractFunction(lotteryContract, methodName, {});\r\n    return { state, send };\r\n}\r\n\r\n","import { useEthers } from \"@usedapp/core\";\r\nimport { Button, makeStyles } from \"@material-ui/core\"\r\nimport rejoicingman from \"../rejoicing-main.png\"\r\nimport { UseContractMethod } from \"../hooks\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    green: {\r\n        background: \"#00FF2A\"\r\n    },\r\n    pink: {\r\n        background: \"#FF0077\"\r\n    },\r\n    container: {\r\n        padding: \"72px 0px 72px 72px\",\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n        gap: theme.spacing(1)\r\n    }\r\n}))\r\nexport const Header = (props) => {\r\n    const classes = useStyles()\r\n    const { activateBrowserWallet, deactivate, account } = useEthers()\r\n    const isConnected = account != undefined\r\n    const recentW = props.recentWinner\r\n    return (\r\n        <div className={classes.container}>\r\n\r\n\r\n            <div className={\"full-width\"}>\r\n                <div className={\"header-connect\"}>\r\n\r\n                    <div>\r\n                        <p>{props.account}</p>\r\n                        {props.isConnected ? <button color=\"green\" className={\"btn connect-btn connected\"}>\r\n                            Connected\r\n\r\n\r\n                        </button> :\r\n                            <button color=\"primary\" className={\"btn connect-btn\"} onClick={() => {\r\n                                props.connectMetaMask()\r\n                            }}>\r\n                                Connect wallet\r\n\r\n\r\n                            </button>\r\n                        }\r\n                    </div>\r\n\r\n                    <p><div>{props.lotteryState === 'Ongoing' ? <button color=\"green\" onClick={() => {\r\n                        props.endLottery()\r\n                    }}>End Lottery</button> :\r\n                        props.lotteryState == 'Ended/Not Started' ? <button color={\"primary\"} onClick={() => {\r\n                            props.startLottery()\r\n                        }}>Start Lottery</button> : props.lotteryState}</div>Lottery State: <span>{props.lotteryState}</span></p>\r\n                </div>\r\n                {<div className={\"header-hero\"}>\r\n                    <div className={\"header-hero-item1\"}>\r\n                        You can enter with at least 50 usd worth of ethereum\r\n\r\n                    </div>\r\n                    <button className={\"header-hero-item2\"} onClick={() => {\r\n                        props.enterLottery()\r\n                    }}>\r\n\r\n                        Enter <br />Lottery\r\n\r\n\r\n\r\n                    </button>\r\n                    <div className={\"header-hero-item3\"}>\r\n                        <img src={rejoicingman} width={\"500px\"} height={\"400px\"} >\r\n                        </img>\r\n                    </div>\r\n\r\n                </div>}\r\n            </div>\r\n        </div >\r\n    )\r\n}","import Web3 from \"web3\";\r\n\r\nfunction Winner(props) {\r\n    return (\r\n        <>\r\n            <td className={\"recent-winner\"}>{props.winner.player}</td>\r\n            <td className={\"recent-winner\"}>{parseFloat(Web3.utils.fromWei(props.winner.entranceFeeInWei + '', \"ether\")).toFixed(3)}eth</td>\r\n            <td className={\"recent-winner\"}>{props.winner.applicants} applicant(s)</td>\r\n            <td className={\"recent-winner\"}>{parseFloat(Web3.utils.fromWei(props.winner.amountWon + '', \"ether\")).toFixed(3)}eth</td>\r\n            <td className={\"recent-winner\"}>{new Date(props.winner.closedDate * 1e3).toLocaleString()}</td>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Winner;","\r\nfunction RecentWinnersHeader(props) {\r\n    return (\r\n        <>\r\n            <td className={\"recent-winners-th\"}><div>{props.header.address}</div></td>\r\n            <td className={\"recent-winners-th\"}><div>{props.header.fee}</div></td>\r\n            <td className={\"recent-winners-th\"}><div>{props.header.applicants}</div></td>\r\n            <td className={\"recent-winners-th\"}><div>{props.header.won}</div></td>\r\n            <td className={\"recent-winners-th\"}><div>{props.header.date}</div></td>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RecentWinnersHeader;","import Winner from \"./Winner\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport RecentWinnersHeader from \"./RecentWinnersHeader\";\r\n\r\nconst winnersheader = [{ address: \"Winners\", fee: \"Entrance fee\", won: \"Amount Won\", date: \"Closed\", applicants: 'Applicants' }]\r\nfunction RecentWinners(props) {\r\n    const [recentWinners, setrecentWinners] = useState(props.recentWinners);\r\n    return (\r\n        <tbody id={\"Recent winners\"} className={\"recent-winners\"}>\r\n            <tr className={\"recent-winners-heading\"}><td>Recent Winners</td></tr>\r\n            <tr className={\"recent-winners-table\"} >\r\n                {winnersheader.map((header) => {\r\n                    return (\r\n                        <RecentWinnersHeader key={header.address.toString()} header={header} />\r\n                    );\r\n                })}\r\n                {props.recentWinners.map((winner, index) => {\r\n                    return (\r\n                        <Winner key={index} winner={winner} />\r\n                    );\r\n                })}\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default RecentWinners;","\r\nfunction HowItWorks(props) {\r\n    return (\r\n        <div className={\"how-it-works\"} >\r\n            <p className={\"how-it-works-heading\"}> How it Works</p>\r\n            <p className={\"paragraph\"}>Easylottery is a completely decentralized lottery application where you can enter lottery with a particular\r\n                amount of ether and then stand a chance to win 100% of the total amount invested into the lottery session.\r\n                The Lottery system is divided into 3 states namely Closed state, Open state, Calculating winner state.\r\n                <br />\r\n                <span style={{ color: \"red\" }}>Note: This lottery system only works on the rinkeby testnet, it hasn't been deploy on any other ethereum network</span>\r\n            </p>\r\n            <div className={\"lottery-state\"}>\r\n                <p>\r\n                    Closed State:\r\n                </p>\r\n                <p>\r\n                    In the closed state, users cannot enter lottery.  This state signifies that\r\n                    the lottery has ended and needs to be started again. After this state is\r\n                    the open state.\r\n                </p>\r\n            </div>\r\n            <div className={\"lottery-state\"}>\r\n                <p>\r\n                    Open State:\r\n                </p>\r\n                <p>\r\n                    In the open state, users can enter lottery with a minimum amount of 50usd worth of ethereum.\r\n                    The lottery will remain open until it is ended by the user. After this state is the calculating winner state.\r\n                    You can click the blue start lottery button on top if the lottery has not yet been started\r\n                </p>\r\n            </div>\r\n            <div className={\"lottery-state\"}>\r\n                <p>\r\n                    Calculating <br /> Winner:\r\n                </p>\r\n                <p>\r\n                    In the calculating winner state the lottery app generates a random number and uses\r\n                    this random number to select a random winner. New entry into the lottery app is also\r\n                    not allowed in these state. This is state usually takes about a minute before transitioning\r\n                    automatically to the closed state\r\n                </p>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HowItWorks;","import { useState } from \"react\"\r\n\r\n\r\n\r\nfunction Faq(props) {\r\n\r\n    const [isOpen, setisOpen] = useState(false)\r\n    return (\r\n        <div className={\"faq\"} onClick={() => {\r\n            setisOpen(!isOpen)\r\n        }}>\r\n            <p className={\"question\"}>{props.faq.question}</p>\r\n            <div className={isOpen ? \"answer\" : \"answer hide\"}>{props.faq.answer}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Faq","import { useState } from \"react\"\r\nimport Faq from \"./Faq\"\r\nconst frequentlyAskQuestion = [\r\n    { question: 'How do I enter lottery?', answer: 'Make sure your metamask is connected and click the glowing \"Enter Lottery\" image' },\r\n    { question: 'How do I get free ether to play?', answer: 'visit \"https://faucet.rinkeby.io/\" and follow the instructions get free ether to play' },\r\n    { question: 'How is the winner choosen?', answer: 'first the lottery contract generates a random number using chainlink, this random number is used to select a random winner from the list of participants' },\r\n    { question: 'what is the lottery contract address?', answer: 'Not for now, these lottery contract only works on the rinkeby ethereum testnet' },\r\n    { question: 'Can I play on the mainnet', answer: 'Not for now, these lottery contract only works on the rinkeby ethereum testnet' },\r\n\r\n\r\n\r\n]\r\n\r\nfunction Faqs(props) {\r\n\r\n    const [faqs, setFaqs] = useState(frequentlyAskQuestion)\r\n    return (\r\n        <div className={\"faqs\"} >\r\n            <p className={\"how-it-works-heading\"}> Frequently Asked question</p>\r\n\r\n            {\r\n                faqs.map((faq, index) => {\r\n                    return (\r\n                        <Faq faq={faq} key={index} />\r\n                    )\r\n                })}\r\n        </div >\r\n    )\r\n}\r\n\r\n\r\nexport default Faqs","import './App.css';\nimport Menu from './components/Menu';\nimport { Header } from './components/Header';\nimport RecentWinners from './components/RecentWinners';\nimport HowItWorks from './components/HowItWorks';\nimport Faqs from './components/Faqs';\nimport Web3 from 'web3';\nimport abi from \"./abi/lottery.json\"\nimport { useEffect, useState } from 'react';\nconst INFURA_ENDPOINT = \"https://rinkeby.infura.io/v3/c95d9276d5e041acbe6411cdda48275e\"\nfunction App() {\n\n  const LotteryContractAddress = '0x65fd425aD3f20835662A9447677A7df40055EF68'\n  const [recentWinners, setrecentWinners] = useState([]);\n  const [isConnected, setisConnected] = useState(false);\n  const [accounts, setAccounts] = useState([]);\n  const [lotteryContract, setlotteryContract] = useState();\n  const [web3, setWeb3] = useState()\n  const [lotteryState, setlotteryState] = useState()\n\n  useEffect(() => {\n    const web3_temp = new Web3(INFURA_ENDPOINT)\n    setWeb3(web3_temp)\n    const lotteryContract = new web3_temp.eth.Contract(abi, LotteryContractAddress)\n    setlotteryContract(lotteryContract)\n    connectMetaMask()\n    detectMetaMaskAccountChange();\n    getRecentWinners(lotteryContract)\n    getLotteryState(lotteryContract)\n  }, []);\n\n  async function detectMetaMaskAccountChange() {\n    window.ethereum.on(\"accountsChanged\", async function () {\n      console.log('you changed the currently selected account')\n      const web3 = new Web3(Web3.givenProvider);\n      web3.eth.getAccounts().then(\n        (response) => {\n          setAccounts(response)\n          if (!response[0]) {\n            console.log('no account is connected')\n            setisConnected(false)\n          }\n        }\n      )\n\n    });\n  }\n\n  function getRecentWinners(lotteryContract) {\n    lotteryContract.methods.lottery_count().call().then((lotteryCount) => {\n      const recentWinnerstemp = []\n      var countTemp = lotteryCount\n      var maxLotterycount = 5;\n      // for (var maxLotterycount = 3; (lotteryCount > 0) && (maxLotterycount > 0); maxLotterycount--) {\n      while ((lotteryCount > 0) && (maxLotterycount > 0)) {\n        lotteryContract.methods.recentWinners(lotteryCount).call().then((response) => {\n          recentWinnerstemp.push(response)\n          countTemp--\n          maxLotterycount--\n          if (countTemp == 0 || maxLotterycount == 0) {\n            console.log('Recent winners retrieved succesfully: ' + maxLotterycount + \"|\")\n            // console.log()\n            setrecentWinners(recentWinnerstemp)\n          }\n        }, (error) => {\n          console.log(error)\n          alert('There was an error retrieving recent winners')\n        })\n        console.log(\"current value: \" + (lotteryCount > 0) && (maxLotterycount > 0))\n        lotteryCount--\n      }\n\n    }, (error) => {\n      console.log(error)\n    })\n  }\n  function getLotteryState(lotteryContract) {\n    lotteryContract.methods.lottery_state().call().then((response) => {\n\n      switch (response) {\n        case '0':\n          setlotteryState(\"Ended/Not Started\")\n          break;\n        case '1':\n          setlotteryState(\"Ongoing\")\n          break;\n        case '2':\n          setlotteryState(\"Calculating winner, please wait\")\n          break;\n        case '3':\n          setlotteryState(\"Processing...\")\n          break;\n        default:\n          setlotteryState(\"Unknown!\")\n          break;\n      }\n    }, (error) => {\n      console.log(error)\n    })\n  }\n\n  function endLottery() {\n\n    setlotteryState(\"Processing...\")\n    const web3 = new Web3(INFURA_ENDPOINT);\n    const lotteryContract = new web3.eth.Contract(abi, LotteryContractAddress);\n    const lotteryOwnerAddress = \"0x281B3B65AE71fc4EBBa61325a6bC2974B80F04c2\"\n    var lotteryContractOwner = web3.eth.accounts.privateKeyToAccount('0x65cde2fe2e5f7c84d33f6e1b25585ff2469b5704d43e1c18a72b5b6978aef57a');\n\n    web3.eth.getTransactionCount(lotteryOwnerAddress, async (err, txCount) => {\n      const txObject = {\n        nonce: txCount,\n        to: LotteryContractAddress,\n        gasLimit: 300000,\n        gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\n        chainId: 4,\n        data: lotteryContract.methods.endLottery().encodeABI()\n      }\n\n      const signedTx = await web3.eth.accounts.signTransaction(txObject, lotteryContractOwner.privateKey);\n\n      console.log('attempting to send signed transaction')\n      web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n        if (!error) {\n          console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Infura's Mempool to view the status of your transaction!\");\n        } else {\n          console.log(\"❗Something went wrong while submitting your transaction:\", error)\n        }\n      }).then((response) => {\n        setlotteryState(\"Ended/Not Started\")\n        console.log('this is the transaction receipt')\n        console.log(response)\n        getLotteryState(lotteryContract)\n      },\n        (error) => {\n          console.log('this is the transaction error receipt')\n          getLotteryState(lotteryContract)\n          console.log(error)\n        }\n      )\n    })\n\n  }\n\n  function startLottery() {\n    setlotteryState(\"Processing...\")\n    const web3 = new Web3(INFURA_ENDPOINT);\n    const lotteryContract = new web3.eth.Contract(abi, LotteryContractAddress);\n    const lotteryOwnerAddress = \"0x281B3B65AE71fc4EBBa61325a6bC2974B80F04c2\"\n    var lotteryContractOwner = web3.eth.accounts.privateKeyToAccount('0x65cde2fe2e5f7c84d33f6e1b25585ff2469b5704d43e1c18a72b5b6978aef57a');\n\n    web3.eth.getTransactionCount(lotteryOwnerAddress, async (err, txCount) => {\n      const txObject = {\n        nonce: txCount,\n        to: LotteryContractAddress,\n        gasLimit: 300000,\n        gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\n        chainId: 4,\n        data: lotteryContract.methods.startLottery().encodeABI()\n      }\n\n      const signedTx = await web3.eth.accounts.signTransaction(txObject, lotteryContractOwner.privateKey);\n\n      console.log('attempting to send signed transaction')\n      web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n        if (!error) {\n          console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Infura's Mempool to view the status of your transaction!\");\n\n        } else {\n          console.log(\"❗Something went wrong while submitting your transaction:\", error)\n        }\n      }).then((response) => {\n        setlotteryState(\"Ongoing\")\n        console.log('this is the transaction receipt')\n        console.log(response)\n        getLotteryState(lotteryContract)\n\n      },\n        (error) => {\n          console.log('this is the transaction error receipt')\n          console.log(error)\n          getLotteryState(lotteryContract)\n\n        }\n      )\n    })\n  }\n\n  function enterLottery() {\n    if (lotteryState != \"Ongoing\") {\n      const cannotEnterLottery = (\"Cannot enter lottery when it's \" + lotteryState + \" Please \") + ((lotteryState == \"Ended/Not Started\") ? \"Click the blue start lottery button to start the lottery\" : \"wait a little for the previouse winner to be selected and then start a new lottery session\")\n      alert(cannotEnterLottery)\n      // console.log(cannotEnterLottery)\n      return;\n    }\n    const web3 = new Web3(Web3.givenProvider);\n    const lotteryContract = new web3.eth.Contract(abi, LotteryContractAddress);\n    lotteryContract.methods.entranceFeeInWei().call().then((response) => {\n      lotteryContract.methods.enter().send({ from: accounts[0], value: response * 1.05 }).then(\n        (response) => {\n          console.log('Entered lottery succesfully')\n        },\n        (errorii) => {\n          console.log('An error occured while attempting to enter lottery')\n          console.log(errorii)\n        }\n      )\n    },\n      (error) => {\n        console.log('error retrieving the entrance fee in wei' + error)\n      })\n\n  }\n\n  const connectMetaMask = async () => {\n    console.log(\"attempting to connect metamask\")\n    if (window.ethereum) {\n      try {\n        Web3.givenProvider.send('eth_requestAccounts')\n          .then((response) => {\n            setAccounts(response.result)\n            setisConnected(true)\n            return true;\n          });\n      } catch (error) {\n        console.log('There was an error connecting to metamask')\n        return false;\n      }\n    }\n  }\n\n  return (\n    <div>\n      <Menu id={\"Home\"} />\n      <Header account={accounts[0]} endLottery={endLottery} startLottery={startLottery} enterLottery={enterLottery} connectMetaMask={connectMetaMask} isConnected={isConnected} lotteryState={lotteryState} />\n      <table>\n        <RecentWinners recentWinners={recentWinners} />\n      </table>\n      <HowItWorks />\n      <Faqs />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}