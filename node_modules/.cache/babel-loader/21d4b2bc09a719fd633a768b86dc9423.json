{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECTS\\\\lottery_game\\\\lotterygame\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Menu from './components/Menu';\nimport { Header } from './components/Header';\nimport RecentWinners from './components/RecentWinners';\nimport HowItWorks from './components/HowItWorks';\nimport Faqs from './components/Faqs';\nimport Web3 from 'web3';\nimport abi from \"./abi/lottery.json\";\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INFURA_ENDPOINT = \"https://rinkeby.infura.io/v3/c95d9276d5e041acbe6411cdda48275e\";\n\nfunction App() {\n  _s();\n\n  const LotteryContractAddress = '0x65fd425aD3f20835662A9447677A7df40055EF68';\n  const [recentWinners, setrecentWinners] = useState([]);\n  const [isConnected, setisConnected] = useState(false);\n  const [accounts, setAccounts] = useState([]);\n  const [lotteryContract, setlotteryContract] = useState();\n  const [web3, setWeb3] = useState();\n  const [lotteryState, setlotteryState] = useState();\n  useEffect(() => {\n    const web3_temp = new Web3(INFURA_ENDPOINT);\n    setWeb3(web3_temp);\n    const lotteryContract = new web3_temp.eth.Contract(abi, LotteryContractAddress);\n    setlotteryContract(lotteryContract);\n    connectMetaMask();\n    detectMetaMaskAccountChange();\n    getRecentWinners(lotteryContract);\n    getLotteryState(lotteryContract);\n  }, []);\n\n  async function detectMetaMaskAccountChange() {\n    window.ethereum.on(\"accountsChanged\", async function () {\n      console.log('you changed the currently selected account');\n      const web3 = new Web3(Web3.givenProvider);\n      web3.eth.getAccounts().then(response => {\n        setAccounts(response);\n\n        if (!response[0]) {\n          console.log('no account is connected');\n        }\n      });\n    });\n  }\n\n  function getRecentWinners(lotteryContract) {\n    lotteryContract.methods.lottery_count().call().then(lotteryCount => {\n      const recentWinnerstemp = [];\n      var countTemp = lotteryCount;\n      var maxLotterycount = 5; // for (var maxLotterycount = 3; (lotteryCount > 0) && (maxLotterycount > 0); maxLotterycount--) {\n\n      while (lotteryCount > 0 && maxLotterycount > 0) {\n        lotteryContract.methods.recentWinners(lotteryCount).call().then(response => {\n          recentWinnerstemp.push(response);\n          countTemp--;\n          maxLotterycount--;\n\n          if (countTemp == 0 || maxLotterycount == 0) {\n            console.log('Recent winners retrieved succesfully: ' + maxLotterycount + \"|\"); // console.log()\n\n            setrecentWinners(recentWinnerstemp);\n          }\n        }, error => {\n          console.log(error);\n          alert('There was an error retrieving recent winners');\n        });\n        console.log(\"current value: \" + (lotteryCount > 0) && maxLotterycount > 0);\n        lotteryCount--;\n      }\n    }, error => {\n      console.log(error);\n    });\n  }\n\n  function getLotteryState(lotteryContract) {\n    lotteryContract.methods.lottery_state().call().then(response => {\n      switch (response) {\n        case '0':\n          setlotteryState(\"Ended/Not Started\");\n          break;\n\n        case '1':\n          setlotteryState(\"Ongoing\");\n          break;\n\n        case '2':\n          setlotteryState(\"Calculating winner, please wait\");\n          break;\n\n        case '3':\n          setlotteryState(\"Processing...\");\n          break;\n\n        default:\n          setlotteryState(\"Unknown!\");\n          break;\n      }\n    }, error => {\n      console.log(error);\n    });\n  }\n\n  function endLottery() {\n    setlotteryState(\"Processing...\");\n    const web3 = new Web3(INFURA_ENDPOINT);\n    const lotteryContract = new web3.eth.Contract(abi, LotteryContractAddress);\n    const lotteryOwnerAddress = \"0x281B3B65AE71fc4EBBa61325a6bC2974B80F04c2\";\n    var lotteryContractOwner = web3.eth.accounts.privateKeyToAccount('0x65cde2fe2e5f7c84d33f6e1b25585ff2469b5704d43e1c18a72b5b6978aef57a');\n    web3.eth.getTransactionCount(lotteryOwnerAddress, async (err, txCount) => {\n      const txObject = {\n        nonce: txCount,\n        to: LotteryContractAddress,\n        gasLimit: 300000,\n        gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\n        chainId: 4,\n        data: lotteryContract.methods.endLottery().encodeABI()\n      };\n      const signedTx = await web3.eth.accounts.signTransaction(txObject, lotteryContractOwner.privateKey);\n      console.log('attempting to send signed transaction');\n      web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n        if (!error) {\n          console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Infura's Mempool to view the status of your transaction!\");\n        } else {\n          console.log(\"❗Something went wrong while submitting your transaction:\", error);\n        }\n      }).then(response => {\n        setlotteryState(\"Ended/Not Started\");\n        console.log('this is the transaction receipt');\n        console.log(response);\n        getLotteryState(lotteryContract);\n      }, error => {\n        console.log('this is the transaction error receipt');\n        getLotteryState(lotteryContract);\n        console.log(error);\n      });\n    });\n  }\n\n  function startLottery() {\n    setlotteryState(\"Processing...\");\n    const web3 = new Web3(INFURA_ENDPOINT);\n    const lotteryContract = new web3.eth.Contract(abi, LotteryContractAddress);\n    const lotteryOwnerAddress = \"0x281B3B65AE71fc4EBBa61325a6bC2974B80F04c2\";\n    var lotteryContractOwner = web3.eth.accounts.privateKeyToAccount('0x65cde2fe2e5f7c84d33f6e1b25585ff2469b5704d43e1c18a72b5b6978aef57a');\n    web3.eth.getTransactionCount(lotteryOwnerAddress, async (err, txCount) => {\n      const txObject = {\n        nonce: txCount,\n        to: LotteryContractAddress,\n        gasLimit: 300000,\n        gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\n        chainId: 4,\n        data: lotteryContract.methods.startLottery().encodeABI()\n      };\n      const signedTx = await web3.eth.accounts.signTransaction(txObject, lotteryContractOwner.privateKey);\n      console.log('attempting to send signed transaction');\n      web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n        if (!error) {\n          console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Infura's Mempool to view the status of your transaction!\");\n        } else {\n          console.log(\"❗Something went wrong while submitting your transaction:\", error);\n        }\n      }).then(response => {\n        setlotteryState(\"Ongoing\");\n        console.log('this is the transaction receipt');\n        console.log(response);\n        getLotteryState(lotteryContract);\n      }, error => {\n        console.log('this is the transaction error receipt');\n        console.log(error);\n        getLotteryState(lotteryContract);\n      });\n    });\n  }\n\n  function enterLottery() {\n    if (lotteryState != \"Ongoing\") {\n      const cannotEnterLottery = \"Cannot enter lottery when it's \" + lotteryState + \" Please \" + (lotteryState == \"Ended/Not Started\" ? \"Click the blue start lottery button to start the lottery\" : \"wait a little for the previouse winner to be selected and then start a new lottery session\");\n      alert(cannotEnterLottery); // console.log(cannotEnterLottery)\n\n      return;\n    }\n\n    const web3 = new Web3(Web3.givenProvider);\n    const lotteryContract = new web3.eth.Contract(abi, LotteryContractAddress);\n    lotteryContract.methods.entranceFeeInWei().call().then(response => {\n      lotteryContract.methods.enter().send({\n        from: accounts[0],\n        value: response * 1.05\n      }).then(response => {\n        console.log('Entered lottery succesfully');\n      }, errorii => {\n        console.log('An error occured while attempting to enter lottery');\n        console.log(errorii);\n      });\n    }, error => {\n      console.log('error retrieving the entrance fee in wei' + error);\n    });\n  }\n\n  const connectMetaMask = async () => {\n    console.log(\"attempting to connect metamask\");\n\n    if (window.ethereum) {\n      try {\n        Web3.givenProvider.send('eth_requestAccounts').then(response => {\n          setAccounts(response.result);\n          setisConnected(true);\n          return true;\n        });\n      } catch (error) {\n        console.log('There was an error connecting to metamask');\n        return false;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Menu, {\n      id: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      account: accounts[0],\n      endLottery: endLottery,\n      startLottery: startLottery,\n      enterLottery: enterLottery,\n      connectMetaMask: connectMetaMask,\n      isConnected: isConnected,\n      lotteryState: lotteryState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(RecentWinners, {\n        recentWinners: recentWinners\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HowItWorks, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Faqs, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"yV8gWzEWmye5C2mrSKouk4eEYAo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/PROJECTS/lottery_game/lotterygame/src/App.js"],"names":["Menu","Header","RecentWinners","HowItWorks","Faqs","Web3","abi","useEffect","useState","INFURA_ENDPOINT","App","LotteryContractAddress","recentWinners","setrecentWinners","isConnected","setisConnected","accounts","setAccounts","lotteryContract","setlotteryContract","web3","setWeb3","lotteryState","setlotteryState","web3_temp","eth","Contract","connectMetaMask","detectMetaMaskAccountChange","getRecentWinners","getLotteryState","window","ethereum","on","console","log","givenProvider","getAccounts","then","response","methods","lottery_count","call","lotteryCount","recentWinnerstemp","countTemp","maxLotterycount","push","error","alert","lottery_state","endLottery","lotteryOwnerAddress","lotteryContractOwner","privateKeyToAccount","getTransactionCount","err","txCount","txObject","nonce","to","gasLimit","gasPrice","utils","toHex","toWei","chainId","data","encodeABI","signedTx","signTransaction","privateKey","sendSignedTransaction","rawTransaction","hash","startLottery","enterLottery","cannotEnterLottery","entranceFeeInWei","enter","send","from","value","errorii","result"],"mappings":"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","sourcesContent":["import './App.css';\nimport Menu from './components/Menu';\nimport { Header } from './components/Header';\nimport RecentWinners from './components/RecentWinners';\nimport HowItWorks from './components/HowItWorks';\nimport Faqs from './components/Faqs';\nimport Web3 from 'web3';\nimport abi from \"./abi/lottery.json\"\nimport { useEffect, useState } from 'react';\nconst INFURA_ENDPOINT = \"https://rinkeby.infura.io/v3/c95d9276d5e041acbe6411cdda48275e\"\nfunction App() {\n\n  const LotteryContractAddress = '0x65fd425aD3f20835662A9447677A7df40055EF68'\n  const [recentWinners, setrecentWinners] = useState([]);\n  const [isConnected, setisConnected] = useState(false);\n  const [accounts, setAccounts] = useState([]);\n  const [lotteryContract, setlotteryContract] = useState();\n  const [web3, setWeb3] = useState()\n  const [lotteryState, setlotteryState] = useState()\n\n  useEffect(() => {\n    const web3_temp = new Web3(INFURA_ENDPOINT)\n    setWeb3(web3_temp)\n    const lotteryContract = new web3_temp.eth.Contract(abi, LotteryContractAddress)\n    setlotteryContract(lotteryContract)\n    connectMetaMask()\n    detectMetaMaskAccountChange();\n    getRecentWinners(lotteryContract)\n    getLotteryState(lotteryContract)\n  }, []);\n\n  async function detectMetaMaskAccountChange() {\n    window.ethereum.on(\"accountsChanged\", async function () {\n      console.log('you changed the currently selected account')\n      const web3 = new Web3(Web3.givenProvider);\n      web3.eth.getAccounts().then(\n        (response) => {\n          setAccounts(response)\n          if (!response[0]) {\n            console.log('no account is connected')\n          }\n        }\n      )\n\n    });\n  }\n\n  function getRecentWinners(lotteryContract) {\n    lotteryContract.methods.lottery_count().call().then((lotteryCount) => {\n      const recentWinnerstemp = []\n      var countTemp = lotteryCount\n      var maxLotterycount = 5;\n      // for (var maxLotterycount = 3; (lotteryCount > 0) && (maxLotterycount > 0); maxLotterycount--) {\n      while ((lotteryCount > 0) && (maxLotterycount > 0)) {\n        lotteryContract.methods.recentWinners(lotteryCount).call().then((response) => {\n          recentWinnerstemp.push(response)\n          countTemp--\n          maxLotterycount--\n          if (countTemp == 0 || maxLotterycount == 0) {\n            console.log('Recent winners retrieved succesfully: ' + maxLotterycount + \"|\")\n            // console.log()\n            setrecentWinners(recentWinnerstemp)\n          }\n        }, (error) => {\n          console.log(error)\n          alert('There was an error retrieving recent winners')\n        })\n        console.log(\"current value: \" + (lotteryCount > 0) && (maxLotterycount > 0))\n        lotteryCount--\n      }\n\n    }, (error) => {\n      console.log(error)\n    })\n  }\n  function getLotteryState(lotteryContract) {\n    lotteryContract.methods.lottery_state().call().then((response) => {\n\n      switch (response) {\n        case '0':\n          setlotteryState(\"Ended/Not Started\")\n          break;\n        case '1':\n          setlotteryState(\"Ongoing\")\n          break;\n        case '2':\n          setlotteryState(\"Calculating winner, please wait\")\n          break;\n        case '3':\n          setlotteryState(\"Processing...\")\n          break;\n        default:\n          setlotteryState(\"Unknown!\")\n          break;\n      }\n    }, (error) => {\n      console.log(error)\n    })\n  }\n\n  function endLottery() {\n\n    setlotteryState(\"Processing...\")\n    const web3 = new Web3(INFURA_ENDPOINT);\n    const lotteryContract = new web3.eth.Contract(abi, LotteryContractAddress);\n    const lotteryOwnerAddress = \"0x281B3B65AE71fc4EBBa61325a6bC2974B80F04c2\"\n    var lotteryContractOwner = web3.eth.accounts.privateKeyToAccount('0x65cde2fe2e5f7c84d33f6e1b25585ff2469b5704d43e1c18a72b5b6978aef57a');\n\n    web3.eth.getTransactionCount(lotteryOwnerAddress, async (err, txCount) => {\n      const txObject = {\n        nonce: txCount,\n        to: LotteryContractAddress,\n        gasLimit: 300000,\n        gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\n        chainId: 4,\n        data: lotteryContract.methods.endLottery().encodeABI()\n      }\n\n      const signedTx = await web3.eth.accounts.signTransaction(txObject, lotteryContractOwner.privateKey);\n\n      console.log('attempting to send signed transaction')\n      web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n        if (!error) {\n          console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Infura's Mempool to view the status of your transaction!\");\n        } else {\n          console.log(\"❗Something went wrong while submitting your transaction:\", error)\n        }\n      }).then((response) => {\n        setlotteryState(\"Ended/Not Started\")\n        console.log('this is the transaction receipt')\n        console.log(response)\n        getLotteryState(lotteryContract)\n      },\n        (error) => {\n          console.log('this is the transaction error receipt')\n          getLotteryState(lotteryContract)\n          console.log(error)\n        }\n      )\n    })\n\n  }\n\n  function startLottery() {\n    setlotteryState(\"Processing...\")\n    const web3 = new Web3(INFURA_ENDPOINT);\n    const lotteryContract = new web3.eth.Contract(abi, LotteryContractAddress);\n    const lotteryOwnerAddress = \"0x281B3B65AE71fc4EBBa61325a6bC2974B80F04c2\"\n    var lotteryContractOwner = web3.eth.accounts.privateKeyToAccount('0x65cde2fe2e5f7c84d33f6e1b25585ff2469b5704d43e1c18a72b5b6978aef57a');\n\n    web3.eth.getTransactionCount(lotteryOwnerAddress, async (err, txCount) => {\n      const txObject = {\n        nonce: txCount,\n        to: LotteryContractAddress,\n        gasLimit: 300000,\n        gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\n        chainId: 4,\n        data: lotteryContract.methods.startLottery().encodeABI()\n      }\n\n      const signedTx = await web3.eth.accounts.signTransaction(txObject, lotteryContractOwner.privateKey);\n\n      console.log('attempting to send signed transaction')\n      web3.eth.sendSignedTransaction(signedTx.rawTransaction, function (error, hash) {\n        if (!error) {\n          console.log(\"🎉 The hash of your transaction is: \", hash, \"\\n Check Infura's Mempool to view the status of your transaction!\");\n\n        } else {\n          console.log(\"❗Something went wrong while submitting your transaction:\", error)\n        }\n      }).then((response) => {\n        setlotteryState(\"Ongoing\")\n        console.log('this is the transaction receipt')\n        console.log(response)\n        getLotteryState(lotteryContract)\n\n      },\n        (error) => {\n          console.log('this is the transaction error receipt')\n          console.log(error)\n          getLotteryState(lotteryContract)\n\n        }\n      )\n    })\n  }\n\n  function enterLottery() {\n    if (lotteryState != \"Ongoing\") {\n      const cannotEnterLottery = (\"Cannot enter lottery when it's \" + lotteryState + \" Please \") + ((lotteryState == \"Ended/Not Started\") ? \"Click the blue start lottery button to start the lottery\" : \"wait a little for the previouse winner to be selected and then start a new lottery session\")\n      alert(cannotEnterLottery)\n      // console.log(cannotEnterLottery)\n      return;\n    }\n    const web3 = new Web3(Web3.givenProvider);\n    const lotteryContract = new web3.eth.Contract(abi, LotteryContractAddress);\n    lotteryContract.methods.entranceFeeInWei().call().then((response) => {\n      lotteryContract.methods.enter().send({ from: accounts[0], value: response * 1.05 }).then(\n        (response) => {\n          console.log('Entered lottery succesfully')\n        },\n        (errorii) => {\n          console.log('An error occured while attempting to enter lottery')\n          console.log(errorii)\n        }\n      )\n    },\n      (error) => {\n        console.log('error retrieving the entrance fee in wei' + error)\n      })\n\n  }\n\n  const connectMetaMask = async () => {\n    console.log(\"attempting to connect metamask\")\n    if (window.ethereum) {\n      try {\n        Web3.givenProvider.send('eth_requestAccounts')\n          .then((response) => {\n            setAccounts(response.result)\n            setisConnected(true)\n            return true;\n          });\n      } catch (error) {\n        console.log('There was an error connecting to metamask')\n        return false;\n      }\n    }\n  }\n\n  return (\n    <div>\n      <Menu id={\"Home\"} />\n      <Header account={accounts[0]} endLottery={endLottery} startLottery={startLottery} enterLottery={enterLottery} connectMetaMask={connectMetaMask} isConnected={isConnected} lotteryState={lotteryState} />\n      <table>\n        <RecentWinners recentWinners={recentWinners} />\n      </table>\n      <HowItWorks />\n      <Faqs />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}